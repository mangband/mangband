name: ci-cd
on: [push]
jobs:
  osx64:
    runs-on: macos-10.15
    outputs:
      version: ${{steps.get_version.outputs.version}}
    steps:
      - uses: actions/checkout@v2
      - id: get_version
        shell: bash
        run: |
          VERSION=`grep "AC_INIT" configure.ac | sed -e s/AC_INIT\(mangband,\ //g -e s/,\ team@mangband.org\)//g`
          echo "::set-output name=version::$VERSION"
      - name: setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - run: |
          brew install automake autoconf
          brew install sdl sdl_ttf
          brew install sdl2 sdl2_ttf
      - name: "Build SDL1.2 client"
        shell: bash
        run: |
          ./autogen.sh -n
          ./configure --with-sdl --without-sdl2 --without-gcu --without-crb
          make clean
          make mangclient.app
          cp mangclient.app mangclient-sdl.app
      - name: "Build SDL2 client"
        shell: bash
        run: |
          ./autogen.sh -n
          ./configure --without-sdl --with-sdl2 --without-gcu --without-crb
          make clean
          make mangclient.app
          cp mangclient.app mangclient-sdl2.app
  win64:
    runs-on: windows-2016
    outputs:
      version: ${{steps.get_version.outputs.version}}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            automake
            autoconf
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-SDL
            mingw-w64-x86_64-SDL_ttf
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-SDL2_ttf
      - id: get_version
        shell: msys2 {0}
        run: |
          VERSION=`grep "AC_INIT" configure.ac | sed -e s/AC_INIT\(mangband,\ //g -e s/,\ team@mangband.org\)//g`
          echo "::set-output name=version::$VERSION"
      - name: "Build SDL1.2 client"
        shell: msys2 {0}
        run: |
          ./autogen.sh -n
          ./configure --with-sdl --without-sdl2 --without-gcu --enable-win
          make clean
          make mangclient.exe
          cp mangclient.exe mangclient-sdl.exe
      - name: "Build SDL2 client"
        shell: msys2 {0}
        run: |
          ./autogen.sh -n
          ./configure --with-sdl --without-sdl2 --without-gcu --enable-win
          make clean
          make mangclient.exe
          cp mangclient.exe mangclient-sdl2.exe
      - name: "Build WIN32 client and server"
        shell: msys2 {0}
        run: |
          ./autogen.sh -n
          ./configure --without-sdl --without-sdl2 --without-gcu --enable-win
          make clean
          make
      - name: "setup NuGet"
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'
      - run: nuget install Tools.InnoSetup -Version 6.2.0
      - shell: msys2 {0}
        run: |
          cp /mingw64/bin/SDL*.dll .
          cp /mingw64/bin/*freetype*.dll .
          cp /mingw64/bin/zlib*.dll .
          ls -l /mingw64/bin/*.dll
          ls -l
#       - uses: suisei-cn/actions-download-file@v1
#         with:
#           url: "https://libsdl.org/release/SDL-devel-1.2.15-VC.zip"
#       - shell: cmd
#         run: '7z x "SDL-devel-1.2.15-VC.zip" -oC:\ > NUL:'
#       - uses: suisei-cn/actions-download-file@v1
#         with:
#           url: "https://libsdl.org/release/SDL_ttf-devel-2.0.11-VC.zip"
#       - uses: suisei-cn/actions-download-file@v1
#         with:
#           url: "https://libsdl.org/release/SDL2-devel-2.0.9-VC.zip"
#       - uses: suisei-cn/actions-download-file@v1
#         with:
#           url: "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-2.0.15-VC.zip"
      - shell: cmd
        run: |
          ISCC.exe "dist\exe\installer-client-win.iss" "/Q"
          ISCC.exe "dist\exe\installer-server-win.iss" "/Q"
      - shell: msys2 {0}
        run: ls -l *.exe
      - uses: actions/upload-artifact@v2
        with:
          name: mangband-client-setup.exe
          path: dist/exe/mangband-client-setup-v${{steps.get_version.outputs.version}}.exe
      - uses: actions/upload-artifact@v2
        with:
          name: mangband-server-setup.exe
          path: dist/exe/mangband-server-setup-v${{steps.get_version.outputs.version}}.exe
  upload_win64:
    runs-on: ubuntu-latest
    needs: win64
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: mangband-server-setup.exe
      - uses: actions/download-artifact@v2
        with:
          name: mangband-server-setup.exe
      - name: Release
        uses: softprops/action-gh-release@v1
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          name: develop-windows
          tag_name: develop-windows
          files: |
            mangband-client-setup-v${{needs.win64.outputs.version}}.exe
            mangband-server-setup-v${{needs.win64.outputs.version}}.exe

  android:
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.get_version.outputs.version}}
    steps:
      - uses: actions/checkout@v1
      - id: get_version
        run: |
          VERSION=`grep "AC_INIT" configure.ac | sed -e s/AC_INIT\(mangband,\ //g -e s/,\ team@mangband.org\)//g`
          echo "::set-output name=version::$VERSION"
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
      - name: "Vendor-drop SDL2 and ln -s assets folder"
        shell: bash
        run: |
         export SDL_VERSION="2.0.10"
         export SDL_TTF_VERSION="2.0.15"
         cd build/asgradle
         wget https://libsdl.org/release/SDL2-${SDL_VERSION}.tar.gz
         tar -xzf SDL2-${SDL_VERSION}.tar.gz
         cp -r SDL2-${SDL_VERSION}/android-project/gradle .
         mv SDL2-${SDL_VERSION} mangclient/jni/SDL2
         wget https://libsdl.org/tmp/SDL_ttf/release/SDL2_ttf-${SDL_TTF_VERSION}.tar.gz
         tar -xzf SDL2_ttf-${SDL_TTF_VERSION}.tar.gz
         mv SDL2_ttf-${SDL_TTF_VERSION} mangclient/jni/SDL2_ttf
         ln -s ../../../../../../lib mangclient/src/main/assets/lib
      - uses: eskatos/gradle-command-action@v1
        with:
          arguments: build connectedCheck assembleDebug assembleRelease
          build-root-directory: build/asgradle
          wrapper-directory: build/asgradle
          wrapper-cache-enabled: true
          dependencies-cache-enabled: true
          configuration-cache-enabled: true
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - shell: bash
        run: |
          cd build/asgradle
          cp mangclient/build/outputs/apk/debug/mangclient-debug.apk ../../.
          cp mangclient/build/outputs/apk/release/mangclient-release-unsigned.apk ../../.
          rm -rf mangclient # kill temp files
          ./.travis-gh.sh > ../../index.html
      - uses: actions/upload-artifact@v2
        with:
          name: mangclient-debug.apk
          path: mangclient-debug.apk
      - uses: actions/upload-artifact@v2
        with:
          name: mangclient-release-unsigned.apk
          path: mangclient-release-unsigned.apk
      - uses: actions/upload-artifact@v2
        with:
          name: index.html
          path: index.html
  upload_android:
    runs-on: ubuntu-latest
    needs: android
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: mangclient-debug.apk
      - uses: actions/download-artifact@v2
        with:
          name: mangclient-release-unsigned.apk
      - uses: actions/download-artifact@v2
        with:
          name: index.html
      - name: Release
        uses: softprops/action-gh-release@v1
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          name: develop-android
          tag_name: develop-android
          files: |
            mangclient-debug.apk
            mangclient-release-unsigned.apk
            index.html

#   appimage_centos:
#     runs-on: ubuntu-latest
#     container:
#       image: docker://centos:6
#     steps:
#       - uses: actions/checkout@v1
#       - run: |
#           ls -l /etc/yum.repos.d/
#           sed -i 's/mirrorlist=/#mirrorlist=/' /etc/yum.repos.d/CentOS-Base.repo
#           sed -i 's/http:\/\/mirror.centos.org/https:\/\/vault.centos.org/' /etc/yum.repos.d/CentOS-Base.repo
#           sed -i 's/#baseurl=/baseurl=/' /etc/yum.repos.d/CentOS-Base.repo 
#           yum install -yq wget which make gcc automake autoconf file
#           yum install -yq ncurses-devel X11-devel SDL-devel SDL2-devel
#           yum install -yq SDL_ttf-devel SDL2_ttf-devel || true
#           rm -f *.AppImage
#           export ARCH=x86_64
#           export VERSION=1.5.3
#           wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${ARCH}.AppImage
#           chmod +x ./*.AppImage
#           export LINUX_DEPLOY="$(pwd)/linuxdeploy-${ARCH}.AppImage --appimage-extract-and-run"
#           dist/appimage/appit.sh --without-x11 --with-gcu --with-sdl
#           cp "MAngbandClient-${VERSION}.AppImage" "MAngbandClient-${VERSION}-${ARCH}.AppImage"

  # debian-based appimage build. would've preferred centos6.
  appimage:
    strategy:
      matrix:
        include:
          - { image: "debian:9", arch: "x86_64" }
          - { image: "i386/debian:9", arch: "i386" }
    runs-on: ubuntu-latest
    container:
      image: docker://${{matrix.image}}
    outputs:
      version: ${{steps.get_version.outputs.version}}
    steps:
      - uses: actions/checkout@v1
      - id: get_version
        run: |
          VERSION=`grep "AC_INIT" configure.ac | sed -e s/AC_INIT\(mangband,\ //g -e s/,\ team@mangband.org\)//g`
          echo "::set-output name=version::$VERSION"
      - name: apt-get install build deps
        run: |
          apt-get update -qq
          apt-get install -yqq make gcc autoconf automake dh-make wget >/dev/null
          apt-get install -yqq dpkg-dev # needed on Ubuntu14 >/dev/null
          apt-get install -yqq libncurses5-dev libsdl1.2-dev libsdl2-dev >/dev/null
          apt-get install -yqq libsdl-ttf2.0-dev libsdl2-ttf-dev >/dev/null
          apt-get install -yqq libX11-dev >/dev/null || apt-get install -y libx11-dev >/dev/null
      - name: Build SDL1.2 + GCU client
        run: |
          ./autogen.sh -n
          ./configure --with-gcu --with-sdl --without-x11
          make
          rm -f *.AppImage
          export ARCH=${{matrix.arch}}
          export VERSION=${{steps.get_version.outputs.version}}
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${ARCH}.AppImage
          chmod +x ./*.AppImage
          export LINUX_DEPLOY="$(pwd)/linuxdeploy-${ARCH}.AppImage --appimage-extract-and-run"
          dist/appimage/appit.sh --without-x11 --with-gcu --with-sdl
          ls -l *.AppImage
      - uses: actions/upload-artifact@v2
        with:
          name: MAngbandClient-${{matrix.arch}}.AppImage
          path: MAngbandClient-${{steps.get_version.outputs.version}}.AppImage
  upload_appimage:
    runs-on: ubuntu-latest
    needs: appimage
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: MAngbandClient-i386.AppImage
      - uses: actions/download-artifact@v2
        with:
          name: MAngbandClient-x86_64.AppImage
      - run: |
          cp MAngbandClient-i386.AppImage MAngbandClient-${{needs.appimage.outputs.version}}-i386.AppImage
          cp MAngbandClient-x86_64.AppImage MAngbandClient-${{needs.appimage.outputs.version}}-x86_64.AppImage
      - name: Release
        uses: softprops/action-gh-release@v1
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          name: develop-appimage
          tag_name: develop-appimage
          files: |
            MAngbandClient-${{needs.appimage.outputs.version}}-i386.AppImage
            MAngbandClient-${{needs.appimage.outputs.version}}-x86_64.AppImage
